{"version":3,"sources":["Components/ContactList/ContactList.module.css","../node_modules/react-bootstrap/esm/Table.js","Redux/contacts-selectors.js","Components/ContactList/ContactList.js"],"names":["module","exports","Table","React","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","_jsx","responsiveClass","children","getFilter","state","filter","Filter","lazy","ContactList","useState","contacts","setContacts","InputValue","useSelector","useFetchContactsQuery","data","error","isLoading","isError","useDeleteContactMutation","deleteContact","isDeleting","contactsNotFoundError","console","log","useEffect","name","toLowerCase","includes","s","ContactsList","ContactsListFilter","length","map","id","phone","a","Button","onClick"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,aAAe,kCAAkC,mBAAqB,0C,0MCsCzEC,EAnCYC,cAAiB,WAWzCC,GAAQ,IAVTC,EAUS,EAVTA,SACAC,EASS,EATTA,UACAC,EAQS,EARTA,QACAC,EAOS,EAPTA,SACAC,EAMS,EANTA,WACAC,EAKS,EALTA,MACAC,EAIS,EAJTA,KACAC,EAGS,EAHTA,QACAC,EAES,EAFTA,WACGC,EACM,iBACHC,EAAoBC,YAAmBX,EAAU,SACjDY,EAAUC,IAAWZ,EAAWS,EAAmBH,GAAW,GAAJ,OAAOG,EAAP,YAA4BH,GAAWD,GAAQ,GAAJ,OAAOI,EAAP,YAA4BJ,GAAQJ,GAAW,GAAJ,OAAOQ,EAAP,YAAoCP,GAAY,GAAJ,OAAOO,EAAP,aAAqCN,GAAc,GAAJ,OAAOM,EAAP,eAAuCL,GAAS,GAAJ,OAAOK,EAAP,WAEvRI,EAAqBC,cAAK,QAAD,YAAC,eAAcN,GAAf,IAC7BR,UAAWW,EACXb,IAAKA,KAGP,GAAIS,EAAY,CACd,IAAIQ,EAAkB,GAAH,OAAMN,EAAN,eAMnB,MAJ0B,kBAAfF,IACTQ,EAAkB,GAAH,OAAMA,EAAN,YAAyBR,IAGtBO,cAAK,MAAO,CAC9Bd,UAAWe,EACXC,SAAUH,IAId,OAAOA,K,iCCpCII,EAAY,SAACC,GAAD,OAAWA,EAAMC,Q,QCUpCC,EAASC,gBAAK,kBAClB,iCAsEaC,UAnEK,WAClB,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAaC,YAAYV,GAC/B,EAA4CW,cAApCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,UAAWC,EAAhC,EAAgCA,QAChC,EAAmDC,cAAnD,mBAAOC,EAAP,KAAmCC,EAAnC,KAAwBJ,UAClBK,EAAwBJ,GAAWF,EAczC,OAbAO,QAAQC,IAAId,GACZe,qBAAU,WACR,IACEd,EACEI,EAAKV,QAAO,qBAAGqB,KACRC,cAAcC,SAAShB,EAAWe,mBAG3C,MAAOX,GACP,OAAOA,KAER,CAACD,EAAMH,IAGR,sBAAK1B,UAAW2C,IAAEC,aAAlB,UACE,sBAAK5C,UAAW2C,IAAEE,mBAAlB,UACE,gDACA,cAACzB,EAAD,OAGDW,GAAa,yCACbL,GAAkC,IAApBF,EAASsB,QAAgB,0DACvCV,GAAyB,0CAC1B,eAAC,EAAD,CAAOnC,SAAO,EAACC,UAAQ,EAACE,OAAK,EAA7B,UACE,gCACE,+BACE,wCACA,sCACA,wCACA,2CAGJ,gCACGoB,GACCA,EAASuB,KAAI,gBAAGP,EAAH,EAAGA,KAAMQ,EAAT,EAASA,GAAIC,EAAb,EAAaA,MAASC,EAAtB,uDAA0B,EAA1B,OACX,+BACE,+BAAOA,IACP,6BAAKV,IACL,6BAAKS,IACL,6BACE,cAACE,EAAA,EAAD,CACE7C,QAAQ,OACR8C,QAAS,WACPlB,EAAcc,IAHlB,SAMGb,EAAa,WAAa,eAXxBa","file":"static/js/ContactList.0c6ac600.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactsList\":\"ContactList_ContactsList__1nG5N\",\"ContactsListFilter\":\"ContactList_ContactsListFilter__3bP32\"};","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;","// export const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.filter;\r\n\r\n// export const getVisibleContacts = (state) => {\r\n//   const allContacts = getContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   console.log(normalizedFilter);\r\n\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\n","import { Table, Button } from \"react-bootstrap\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { lazy } from \"react\";\r\nimport s from \"./ContactList.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getFilter } from \"../../Redux/contacts-selectors\";\r\nimport {\r\n  useFetchContactsQuery,\r\n  useDeleteContactMutation,\r\n} from \"../Services/contactsApi\";\r\nconst Filter = lazy(() =>\r\n  import(\"../Filter/Filter.js\" /* webpackChunkName: \"Filter\" */)\r\n);\r\n\r\nconst ContactList = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const InputValue = useSelector(getFilter);\r\n  const { data, error, isLoading, isError } = useFetchContactsQuery();\r\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\r\n  const contactsNotFoundError = isError && error;\r\n  console.log(contacts);\r\n  useEffect(() => {\r\n    try {\r\n      setContacts(\r\n        data.filter(({ name }) =>\r\n          name.toLowerCase().includes(InputValue.toLowerCase())\r\n        )\r\n      );\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }, [data, InputValue]);\r\n\r\n  return (\r\n    <div className={s.ContactsList}>\r\n      <div className={s.ContactsListFilter}>\r\n        <h2>Contacts List:</h2>\r\n        <Filter />\r\n      </div>\r\n\r\n      {isLoading && <h2>Wait...</h2>}\r\n      {InputValue && contacts.length === 0 && <h2>No results were found...</h2>}\r\n      {contactsNotFoundError && <h2>Error...</h2>}\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>â„–</th>\r\n            <th>Name</th>\r\n            <th>Number</th>\r\n            <th>Edit</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {contacts &&\r\n            contacts.map(({ name, id, phone }, a = 1) => (\r\n              <tr key={id}>\r\n                <td>{++a}</td>\r\n                <td>{name}</td>\r\n                <td>{phone}</td>\r\n                <td>\r\n                  <Button\r\n                    variant=\"link\"\r\n                    onClick={() => {\r\n                      deleteContact(id);\r\n                    }}\r\n                  >\r\n                    {isDeleting ? \"Deleting\" : \"Delete\"}\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n};\r\n\r\nexport default ContactList;\r\n"],"sourceRoot":""}